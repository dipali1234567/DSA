2328. Number of Increasing Paths in a Grid
User Accepted:1951
User Tried:3054
Total Accepted:2065
Total Submissions:6032
Difficulty:Hard
You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.

Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo 109 + 7.

Two paths are considered different if they do not have exactly the same sequence of visited cells.

 

Example 1:


Input: grid = [[1,1],[3,4]]
Output: 8
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [1], [3], [4].
- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].
- Paths with length 3: [1 -> 3 -> 4].
The total number of paths is 4 + 3 + 1 = 8.
Example 2:

Input: grid = [[1],[2]]
Output: 3
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [2].
- Paths with length 2: [1 -> 2].
The total number of paths is 2 + 1 = 3.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
1 <= grid[i][j] <= 105

Java	
 
    public static boolean isValid(int i,int j,int m,int n)
    {
        if(i<0||j<0||i>=m||j>=n)
            return false;
        
        return true;
    }
    static int calculate(int [][]grid,int vis[][],int i,int j,int m,int n)
    {
        
        
        if(vis[i][j]!=0)
            return vis[i][j]%mod;
        
        
        
        int r[]={1,-1,0,0};
        int c[]={0,0,1,-1};
        
        int paths=0;
        for(int k=0;k<4;k++)
        {
            int i1=i+r[k];
            int j1=j+c[k];
            if(isValid(i1,j1,m,n)&&(grid[i][j]<grid[i1][j1]))
           paths= (paths+calculate(grid,vis,i1,j1,m,n))%mod;
        
        }
        
        vis[i][j]=(paths+1)%mod;
        return vis[i][j]%mod;
          
    }
    
    
    
    public int countPaths(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int vis[][]=new int[m][n];
        int paths=0;
       for(int i=0;i<m;i++)
       {
          for(int j=0;j<n;j++)
              paths+=calculate (grid,vis,i,j,m,n)%1000000007;
        }
        return paths%1000000007;
               
        
    }
}
1
class Solution {
2
    
3
    static final int mod=1000000007;
4
    
5
    public static boolean isValid(int i,int j,int m,int n)
6
    {
7
        if(i<0||j<0||i>=m||j>=n)
8
            return false;
9
        
10
        return true;
11
    }
12
    static int calculate(int [][]grid,int vis[][],int i,int j,int m,int n)
13
    {
14
        
15
        
16
        if(vis[i][j]!=0)
17
            return vis[i][j]%mod;
18
        
19
        
20
        
21
        int r[]={1,-1,0,0};
22
        int c[]={0,0,1,-1};
23
        
24
        int paths=0;
25
        for(int k=0;k<4;k++)
26
        {
27
            int i1=i+r[k];
28
            int j1=j+c[k];
29
            if(isValid(i1,j1,m,n)&&(grid[i][j]<grid[i1][j1]))
30
           paths= (paths+calculate(grid,vis,i1,j1,m,n))%mod;
31
        
32
        }
33
        
34
        vis[i][j]=(paths+1)%mod;
35
        return vis[i][j]%mod;
36
          
37
    }
38
    
39
    
40
    
41
    public int countPaths(int[][] grid) {
42
        int m=grid.length;
43
        int n=grid[0].length;
44
        int vis[][]=new int[m][n];
45
        int paths=0;
46
       for(int i=0;i<m;i++)
47
       {
48
          for(int j=0;j<n;j++)
49
              paths+=calculate (grid,vis,i,j,m,n)%1000000007;
50
        }
51
        return paths%1000000007;
52
               
53
        
54
    }