Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.




class Solution {
    
    static void cal(int n,int arr[],boolean vis[],ArrayList<Integer>list,
                    List<List<Integer>>lists)
        
    {
        if(list.size()==n)
        {
            lists.add(new ArrayList<>(list));
            return;
        }
        
        for(int i=0;i<n;i++)
        {
            if(vis[i]==false)
            {
                list.add(arr[i]);
                vis[i]=true;
                cal(n,arr,vis,list,lists);
                list.remove(list.size()-1);
                vis[i]=false;
            }
        }
    }
    
    
    public List<List<Integer>> permute(int[] nums) {
        
        List<List<Integer>>lists=new ArrayList<>();
        boolean [] vis=new boolean[nums.length];
        cal(nums.length,nums,vis,new ArrayList<>(),lists);
        
        return lists;
    }
}