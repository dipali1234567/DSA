Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []





//Code


class Solution {
    
    static void cal(int index,int arr[],int n,int sum,ArrayList<Integer>ds,List<List<Integer>>lists)
    {
        if(index==n)
        {
            if(sum==0)
            {
                System.out.println(ds);
                lists.add(new ArrayList<>(ds));
            }
            
            return ;
        }
        
         if(arr[index]<=sum){
            
        
     
        ds.add(arr[index]);
        //Picking the elemet and staying at that index only 
        cal(index,arr,n,sum-arr[index],ds,lists);
        ds.remove(ds.size()-1);
       
         }
        //moving to next index without picking
        cal(index+1,arr,n,sum,ds,lists);
        
    }
    public List<List<Integer>> combinationSum(int[] c, int target) {
        
        
        List<List<Integer>>lists=new ArrayList<>();
        
        cal(0,c,c.length,target,new ArrayList<>(),lists);
        return lists;
        
    }
}