The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9





class Solution {
    
    
 /*   static boolean isSafe(int row,int col,int n,String[][]chess)
    {
        for(int i=0;i<n;i++)
        {
            if( chess[i][col].equals("Q"))
                return false;
            
            if( chess[row][i].equals("Q"))
                return false;
            
        }
        
        
        // int i=row;
        // int j=col;
        // while(i<n && j<n)
        // {
        //      if( chess[i][j].equals("Q"))
        //         return false;
        //     i++;
        //     j++;
        // }
        
     int   i=row;
    int    j=col;
        while(i>=0&&j>=0)
        {
           if(        chess[i][j].equals("Q"))
                return false;
            i--;
            j--;
        }
        
        i=row;
        j=col;
        
        while(i<n && j>=0)
        {
            if(chess[i][j].equals("Q"))
                return false;
            
            i++;
            j--;
        }
        
        
//         i=row;
//         j=col;
        
        
//         while(i>=0 && j<n)
//         {
//             if( chess[i][j].equals("Q"))
//                 return false;
            
//             i--;
//             j++;
//         }
        
       return true; 
    }
    
    
    public static void getWays(int n,String [][]chess,List<List<String>>chessBoard,int col)
    {
        if(col==n)
        {
            
            ArrayList<String>list=new ArrayList<>();
            for(int i=0;i<n;i++){
                String s="";
                for(int j=0;j<n;j++){
                    s+=chess[i][j];
                }
            list.add(s);
            }
            chessBoard.add(list);
            return;
        }
        
        
        for(int i=0;i<n;i++)
        {
            if(isSafe(i,col,n,chess))
            {
                chess[i][col]="Q";
              
                getWays(n,chess,chessBoard,col+1);
                chess[i][col]=".";
               
            }
        }
        
    }
    
 */ 
    //Now it's time to optimize the code
    
    
    
    
      public static void getWays(int n,String [][]chess,List<List<String>>chessBoard,int col,
            int leftRow[],int upperDiagonal[],int lowerDiagonal[])
    {
        if(col==n)
        {
            
            ArrayList<String>list=new ArrayList<>();
            for(int i=0;i<n;i++){
                String s="";
                for(int j=0;j<n;j++){
                    s+=chess[i][j];
                }
            list.add(s);
            }
            chessBoard.add(list);
            return;
        }
        
        
        for(int row=0;row<n;row++)
        {
            if(leftRow[row]==0 && upperDiagonal[n-1+col-row]==0 && lowerDiagonal[row+col]==0)
            {
                
               leftRow[row]=1;
                upperDiagonal[n-1+col-row]=1;
                lowerDiagonal[row+col]=1;
                chess[row][col]="Q";
              
                getWays(n,chess,chessBoard,col+1,leftRow,upperDiagonal,lowerDiagonal);
                chess[row][col]=".";
                
                  leftRow[row]=0;
                upperDiagonal[n-1+col-row]=0;
                
                lowerDiagonal[row+col]=0;
               
            }
        }
        
    }
    
    
    
    public List<List<String>> solveNQueens(int n) {
        
       /* String [][] chess= new String[n][n];
        
        for(int i=0;i<n;i++)
        {
            Arrays.fill(chess[i],".");
        }
        
        List<List<String>>chessBoard=new ArrayList<>();
       
        getWays(n,chess, chessBoard, 0);
        
        
        return chessBoard; */
        
        
        //Optimized code called
        
        int leftRow[]=new int[n];
        int upperDiagonal[]=new int[2*n-1];
        int lowerDiagonal[]=new int[2*n-1];
        
        
        String [][] chess= new String[n][n];
        
        for(int i=0;i<n;i++)
        {
            Arrays.fill(chess[i],".");
        }
        
        List<List<String>>chessBoard=new ArrayList<>();
       
        getWays(n,chess, chessBoard, 0,leftRow, upperDiagonal, lowerDiagonal);
        
        
        return chessBoard;
        
        
    }
}